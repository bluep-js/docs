Введение и термины
==================

В этой главе основные термины будут представлены **@bluepjs** без подробных деталей.

**@bluepjs** состоит из двух основных частей:

Виртуальная машина (VM)
-----------------------

**VM** предназначена для выполнения **Blueprints**

*npm install @bleupjs/vm*

**VM** может использоваться как в браузере, так и в nodejs.

Интегрированная среда разработки (IDE)
--------------------------------------

**IDE** предназначена для управления **Blueprints** и **Libraries**

*npm install @bleupjs/vue3-ide*

.. note::

   Ok, если быть точным в терминологии, это не "REAL IDE" - сейчас это больше "editor".
   
   "Full IDE" должна также включать "среду исполнения/отладки", и эта часть будет полностью реализована позже.

.. note::

   В настоящее время IDE построена на Vue3 и предоставляется как модуль Vue3.

   vite/nuxt/pure/react/etc версии будут разработана позже.

Обе части являются независимыми пакетами, поэтому их можно использовать по мере необходимости.

Другие термины, используемые в коде и этой документации:

Application (App)/Приложение
----------------------------

**@bluepjs** это не автономное программное обеспечение, это **скриптовый движок**.

Он предназначен для включения в другие приложения в качестве скриптового движка для объектов приложений.

В данной документации разрабатываемое приложение, использующее **@bluepjs** именуется **Application** (или **App**).

Developer/Разработчик
-----------------------

Человек (или группа людей), который разрабатывает **Application/Приложение**, **Modules/Модули** или **Libraries/Библиотеки**.

User/Пользователь
-----------------

Человек (или группа людей), которые используют **@bluepjs** **IDE** для разработки поведения **Application/Приложения**.

Module/Модуль
-------------

**@bluepjs** разработан таким образом, чтобы его можно было расширять за счет стороннего кода, организованного в специальные **Modules/Модули**.

**Modules/Модули** предназначены для импорта/экспорта программистами (**Developers/Разработчиками**) и могут содержать новые **Nodes/узлы**, **Libraries/библиотеки**, **Events/события**, **Actors/акторы** и другие объекты для расширения и организации **@bluepjs** функциональности и могут быть универсальными или специфичными для каждого **App/приложения**.

Libraries (Libs)/Библиотеки
---------------------------

**Blueprints** хранятся и организуются в **Libraries/библиотеки**.

**@bluepjs** не заботится о хранении **Libraries/библиотек** - эта часть должна выполняться **Application/приложениями** - структура **Library/библиотек** совместима с JSON форматом и может быть легко сохранена различными способами.

**Libraries/библиотеки** предназначены для импорта /экспорта *обычными пользователями* в виде *модулей многократного использования* и хранения всего необходимого содержимого *модуля многократного использования* и скриптов.

.. note::

   Прямо сейчас поддерживается только одна библиотека "По умолчанию".

   Полная поддержка (использование / импорт / экспорт) будет добавлена в следующих версиях.

Actors/Акторы
-------------

Сущности **Application/приложения**, управляемые **VM/ВМ** в **@bluepjs** называются **Actors/Акторы**.

Они разрабатываются **Developer/Разработчиками** и относятся к **Application/Приложениям**, **Library/Библиотекам** или **Module/Модулям**.

**Actors/Акторы** могут иметь:

  * **State/Состояние** - свойства **Actor/Актора** только для чтения.
  * **Methods/Методы** - действия, выполняемые **Actor/Актором**.
  * **Events/События** - сигналы, исходящие от **Actor/Акторов** и управляемые **VM/ВМ**.

Events/События
--------------

**VM/ВМ** предназначена для управления событиями от **Actors/Акторов** (**Actor event/События акторов**) и от **Modules/Модулей** (также названных в документации как **Global Event/Глобальное событие** или **VM Event/Событие ВМ**).

**Events/События** могут иметь **Outputs/Выходы** для передачи данных о событиях в **Blueprint**.

**Global Events/Глобальные события** могут иметь поля **Configuration/Конфигурация** для специфической настройки.

.. note::

   В данной документации термин **Event/Событие** без указания на "Actor/Актора", "GlobalГлобальный" или "VM/ВМ" должен уточняться по контексту.

Blueprints
----------

**Library/Библиотеки** скриптуемых сущностей. Могут быть:

  * **Library/Библиотека** **Function/Функция** скрипт
  * **Library/Библиотека** **Class/Класс** **Method/Метод** скрипт
  * **Library/Библиотека** **Event/Событие** скрипт
    
**Blueprints** создаются с помощью **Nodes/Узлов** и **Edges/Связок** в **Execution Flow/Потоке выполнения** **IDE**.

Nodes/Узлы
----------

**Nodes/Узлы**- это минимальный блок сценария **Blueprint**. Они могут представлять код Java Script, предоставленный **Developers/Разработчиками** или другими **Libraries/Библиотеками** **Blueprints**.

**Nodes/Узлы** имеют **Inputs/Входы** и **Outputs/Выходы** и могут быть двух различных типов:

Executable Nodes/Исполняемые узлы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Эти **Nodes/Узлы** имеют специальный **Executable Input/Исполняемый вход** и по крайней мере один **Executable Output/Исполняемый выход** для **Execution Flow/Потока исполнения**.

Например:

.. image:: ./_static/intro-executable-node.png
   :alt: Executable Node example

.. note::

   **Executable Nodes/Исполняемые узлы** легко распознаются по наличию заголовка.

Modifier Nodes/Узлы-модификаторы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**modifiers/модификаторы** - у этих **Nodes/Узлов** нет **Executable Inputs/Исполняемых входов** или **Executable Outputs/исполняемых выходов**, и **Execution Flow/Поток выполнения** этих **Nodes/Узлов** зависит от **Edges/Связок**.

Например:

.. image:: ./_static/intro-modifier-node.png
   :alt: Modifier Node example

Getter Nodes/Узлы-получатели
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**getters/получатели** - это **Nodes/узлы**, такие же, как **modifiers/модификаторы**, не имеют **Executable Slots/исполняемых слотов**. Кроме того, у них нет **Input slots/входных слотов** и есть только **Output slots/выходные слоты** (обычно - один).

.. image:: ./_static/intro-getter-node.png
   :alt: Getter Node example

Slots (Node Slots)/Слоты (Узловые слоты)
----------------------------------------

**Slot/Слот** в этой документации является общим названием для любого **Node/Узла** **Input/ввода** или **Output/вывода**, поэтому существуют **Input Slots/Слоты ввода** и **Output Slots/Слоты вывода**.

Цвет и форма **Slot/Слота** визуально представляют тип данных слота.

**Slots/Слоты** могут быть соединены или разъединены, например:

Подключен **Input Slot/Входной слот** типа ``basic/datetime`` с именем "Datetime"

.. image:: ./_static/intro-connected-slot.png
   :alt: Connected Input Datetime Slot

Отключенный **Input Slot/Входной слот** типа ``basic/string`` с ручным значением "Cron at "

.. image:: ./_static/intro-disconnected-slot.png
   :alt: Disconnected Input String Slot

Отключенные **Input Slots/Входные слоты** значения могут быть введены вручную.

Edges (Connections)/Связки (соединения)
---------------------------------------

**Nodes/Узлы**, соединенные вместе с **Edges/Связками** посредством **Slots/Слотов**.

Цвет **Edge/Связки** представляет тип данных подключенных **Slots**.

Например: **Edge/Связка** типа ``basic/datetime`` соединяет **Output Slot/Выходной слот** с именем "Now" и **Input Slot/Входной слот** с именем "Datetime"

.. image:: ./_static/intro-edge.png
   :alt: Edge of type datetime

Execution Flow/Поток выполнения
-------------------------------

Способ упорядочивания **Nodes/Узлов** для выполнения определяется путем соединения **Nodes/Узлов** с **Execution Slots/Слотами выполнения**

.. image:: ./_static/intro-execution-flow.png
   :alt: Execution flow example

На примере изображения **Execution Edges/Выполняемыми связками** являются **a**, **b** и **c**, и они определяют порядок выполнения **Nodes/Узлов**.

Более подробная информация о **Execution Flow/Потоке выполнения** будет рассмотрена в следующей главе.
